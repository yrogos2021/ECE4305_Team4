from array import *
import adi
import time
import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate
import scipy.special as special

# Create radio
sdr = adi.Pluto()

sample_rate = 8e6
symbol_rate = 1e6
center_freq = 2.45e9
exponent = 10
num_samples = 2**exponent

sdr = adi.Pluto ("ip:192.168.2.1")
sdr.sample_rate = int(sample_rate)
sdr.rx_rf_bandwidth = int(sample_rate)
sdr.rx_lo = int(center_freq)
sdr.rx_buffer_size = num_samples

data = sdr.rx()

# --------- Calculate Total Energy ----------
time_to_freq = numpy.fft(data)
shifted_frequency = numpy.fft.fftshift(time_to_freq)
# calculate width
# length = len(shifted_frequency)
energy_sum = sum(shifted_frequency)

# ----------------- Set Fc ------------------
half_energy = energy_sum/2
sample_center = 0
summation = 0
for i in range(num_samples):
	summation = summation + shifted_frequency[i]
	if summation < half_energy:
		pass
	else:
		sample_center = i
		break

bin_w = sample_rate/len(shifted_frequency)
num_offset = sample_center - len(shifted_frequency)/2
foffset = -bin_w * num_offset



# ----------------- Coarse Frequency------------------
time_axis = np.linspace( 0, num_samples/sample_rate, len(data))
neg_freq_detrend_line = np.exp(1j*2*np.pi.0.5*sample_rate*time_axis)
coarse_freq_correct = np.exp(1j*2*np.pi*foffset*time_axis)
center_data = data*neg_freq_detrend_line*coarse_freq_correct

unwrapped_data_phase = np.unwrap(np.angle(center_data)
unwrapped_compensator_phase = np.wrap(compensator_phase)

data_phase_derivative = np.diff(unwrapped_data_phase)

shifted = data_phase_derivative**2
shifted = list(map(lambda x: 0 if x < 4 else x, shifted))

